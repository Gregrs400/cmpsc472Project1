#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <pthread.h>
#include <string.h>

typedef struct
    {

        char* stringPointer;
        int sliceSize;
        int startIndex;
        char* saveptr;
        int fileSize;
        char* filePath;

    } ThreadData;

typedef struct
{

    char* filePath;
    int fileSize;

} FilePathAndSize;

pthread_mutex_t lock;

int tokenizeAndCountWords(const ThreadData *data);


int main(void)
{


    typedef struct
    {

        char* word;
        int count;

    } WordCount;

    FILE *file;
    char ch;
    void split_sentences(const char *filename);
    int process_file(FilePathAndSize *fileAndSize);

    FilePathAndSize files[] =
    {(FilePathAndSize){"drive/MyDrive/cmpsc472Project1/bib",111261},
    (FilePathAndSize){"drive/MyDrive/cmpsc472Project1/paper1", 53161},
    (FilePathAndSize){"drive/MyDrive/cmpsc472Project1/paper2", 82199},
    (FilePathAndSize){"drive/MyDrive/cmpsc472Project1/progc",39611},
    (FilePathAndSize){"drive/MyDrive/cmpsc472Project1/progl",71646},
    (FilePathAndSize){"drive/MyDrive/cmpsc472Project1/progp",49379},
    (FilePathAndSize){"drive/MyDrive/cmpsc472Project1/trans", 93695}};

    pid_t child_processes[7];

    int pipe_parentToChildren[7][2];
    int pipe_childrenToParent[7][2];

    for (int i = 0; i < 7; i++)
    {

        if (pipe(pipe_parentToChildren[i]) == -1 || pipe(pipe_childrenToParent[i]) == -1)
        {
            perror("Pipe creation failed");
            return 1;
        }

    }

    child_processes[0] = fork();

    if (child_processes[0] > 0)
    {

        close(pipe_parentToChildren[0][0]);
        close(pipe_childrenToParent[0][1]);

        write(pipe_parentToChildren[0][1], &files[0], sizeof(files[0]));

        close(pipe_parentToChildren[0][1]);

        for (int i = 1; i < 7; i++)
        {

            child_processes[i] = fork();

            if (child_processes[i] == 0)
            {
                close(pipe_childrenToParent[i][1]);
                close(pipe_parentToChildren[i][1]);

                FilePathAndSize fileAndSize;

                read(pipe_parentToChildren[i][0], &fileAndSize, sizeof(fileAndSize));

                close(pipe_parentToChildren[i][0]);

                process_file(&fileAndSize);

                exit(0);

            }
            else if (child_processes[i] > 0)
            {

                close(pipe_parentToChildren[i][0]);
                close(pipe_childrenToParent[i][1]);

                write(pipe_parentToChildren[i][1], &files[i], sizeof(files[i]));

                close(pipe_parentToChildren[i][1]);

            }
            else
            {

                perror("fork failed\n");
                exit(1);

            }
        }

        wait(NULL);

    }
    else if (child_processes[0] == 0)
    {

        FilePathAndSize fileAndSize;

        read(pipe_parentToChildren[0][0], &fileAndSize, sizeof(fileAndSize));

        close(pipe_parentToChildren[0][0]);

        exit(0);

    }
    else
    {

        perror("fork failed\n");

    }

    return 0;

}
int process_file(FilePathAndSize *fileAndSize)
{

    int sliceSize = fileAndSize -> fileSize / 3;

    int start_index = 0;

    pthread_t threads[3];

    for (int i = 0; i < 3; i++)
    {

        ThreadData threadData;
        threadData.startIndex = i*sliceSize + i;
        threadData.sliceSize = sliceSize;
        threadData.filePath = fileAndSize -> filePath;
        threadData.fileSize = fileAndSize -> fileSize;
        pthread_create(&threads[i], NULL, (void*)tokenizeAndCountWords, &threadData);

    }

    for (int i = 0; i < 3; i++)
    {
        if (i == 0)
            pthread_join(threads[i], NULL);
    }

}
int tokenizeAndCountWords(const ThreadData *data)
{

    pthread_mutex_lock(&lock);

    int numOfWords = 0;

    FILE *file;

    char *fileString = (char *)malloc(data -> fileSize + 1);

    if (fileString == NULL) {
    perror("Memory allocation failed");
    return -1;
    }

    file = fopen(data -> filePath, "r");

    if (file == NULL) {
        perror("Error opening file");
        return -1;
    }

    fread(fileString, sizeof(char), data -> fileSize, file);

    int i, j;

    for (i = 0, j = 0; i < data -> fileSize; i++)
    {
        if (fileString[i] != '\0')
        {
            fileString[j++] = fileString[i];
        }
    }

    fileString[data -> fileSize] = '\0';

    fclose(file);

    char *stringPointer = fileString + (data -> startIndex);
    int sliceSize = data -> sliceSize;

    char slice[sliceSize];
    strncpy(slice, stringPointer, sliceSize);

     char *saveptr = data -> saveptr;

    char *word = strtok_r(slice, " \t\n", &saveptr);
    while (word != NULL)
    {
        // printf("%s\n", word);
        numOfWords++;
        word = strtok_r(NULL, " \n\t", &saveptr);

    }

    pthread_mutex_unlock(&lock);

    printf("Num of words: %d\n", numOfWords);

